@page "/schedule"
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.WebUtilities
@using Schedules = WPLBlazor.Models.Schedules

<PageTitle>Schedule</PageTitle>

<h1>Schedule</h1>
<br />


    @foreach (var day in schedules.DistinctBy(x => x.Date))
{
    <Card>
        <CardBody>
            <CardTitle Size="4"></CardTitle>
            <CardText>
                <center><h3>@day.Date.ToLongDateString()</h3></center>
                <center><h4>Week: @day.Week_Id</h4></center>
                @*                     <table width="100%" class="table">
            <thead>
            <tr>
            <th colspan="6"><center>Date: @day.Date.ToLongDateString()</center></th>
            </tr>
            <tr>
            <th colspan="6"><center>Week: @day.Week_Id</center></th>
            </tr>
            <tr>
            <th width="16%"><center>Win</center></th>
            <th width="16%"><center>Home Team</center></th>
            <th width="16%" />
            <th width="16%"><center>Away Team</center></th>
            <th width="16%"><center>Win</center></th>
            <th width="16%"><center>Table #</center></th>
            </tr>
            </thead>
            @foreach (var d in schedules.Where(x => x.Date == day.Date))
            {
            <tbody>
            <tr>
            <td><center><Check Checked="@HomeWinChecked(d.Week_Id, d.Home_Team).Result" Disabled /></center></td>
            <td><center>@teams.Where(x => x.Id == d.Home_Team).FirstOrDefault().TeamName</center></td>
            <td><center>vs</center></td>
            <td><center>@teams.Where(x => x.Id == d.Away_Team).FirstOrDefault().TeamName</center></td>
            <td><center><Check Checked="@AwayWinChecked(d.Week_Id, d.Away_Team).Result" Disabled /></center></td>
            <td><center>@d.Table_Number</center></td>

            </tr>
            </tbody>
            }
            </table> *@

                <Table Striped Bordered>
                    <TableHeader>
                        <TableHeaderCell><center>Win</center></TableHeaderCell>
                        <TableHeaderCell><center>Home Team</center></TableHeaderCell>
                        <TableHeaderCell></TableHeaderCell>
                        <TableHeaderCell><center>Away Team</center></TableHeaderCell>
                        <TableHeaderCell><center>Win</center></TableHeaderCell>
                        <TableHeaderCell><center>Table Number</center></TableHeaderCell>
                    </TableHeader>
                    @foreach (var d in schedules.Where(x => x.Date == day.Date))
                    {
                        <TableBody>
                            <TableRowCell><center><Check Checked="@HomeWinChecked(d.Week_Id, d.Home_Team).Result" Disabled /></center></TableRowCell>
                            <TableRowCell><center>@teams.Where(x => x.Id == d.Home_Team).FirstOrDefault().TeamName</center></TableRowCell>
                            <TableRowCell><center>vs</center></TableRowCell>
                            <TableRowCell><center>@teams.Where(x => x.Id == d.Away_Team).FirstOrDefault().TeamName</center></TableRowCell>
                            <TableRowCell><center><Check Checked="@AwayWinChecked(d.Week_Id, d.Away_Team).Result" Disabled /></center></TableRowCell>
                            <TableRowCell><center>@d.Table_Number</center></TableRowCell>
                        </TableBody>
                    }
                </Table>
            </CardText>
        </CardBody>
    </Card>
    <br />
}


@code {
    [CascadingParameter]
    LoadingIndicator? loadingIndicator { get; set; }

    private APIService aPIService = new();
    private RosterHelper RosterHelper = new();
    private TeamHelper teamHelper = new();
    private WeekHelper weekHelper = new();
    private List<Schedules> schedules = [];
    private List<TeamDetails> teams = [];
    private List<TeamStats> teamStats = [];
    private List<WeekFullInfo> weeks = [];
    private WeekFullInfo? homeWeek = new();

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        teams = await aPIService.GetTeamDetails();
        schedules = await RosterHelper.GetSchedules();
        teamStats = await teamHelper.GetAllTeamStats();
        weeks = await weekHelper.GetFullWeek();
        await loadingIndicator.Hide();
    }

    async Task<bool> HomeWinChecked(int WeekId, int HomeId)
    {
        homeWeek = weeks.Where(x => x.WeekNumber == WeekId && x.Home_Team == HomeId).FirstOrDefault();
        if (homeWeek == null)
        {
            return false;
        }
        if (homeWeek.Home_Won)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    async Task<bool> AwayWinChecked(int WeekId, int HomeId)
    {
        homeWeek = weeks.Where(x => x.WeekNumber == WeekId && x.Away_Team == HomeId).FirstOrDefault();
        if (homeWeek == null)
        {
            return false;
        }
        if (!homeWeek.Home_Won)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
