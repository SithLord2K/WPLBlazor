@page "/schedule"
@attribute [StreamRendering]
@using Schedules = WPLBlazor.Models.Schedules
@inject NavigationManager navigationManager

<anchor id="top" />
<PageTitle>Schedule</PageTitle>

<Card Padding="Padding.Is2">
    <CardBody>
    <CardTitle Size="3">Season Schedule</CardTitle>
    <Divider />
    <CardText>
        Select date to jump to that week:
        <Addons>
            <Addon AddonType="AddonType.Body">
                <DatePicker @ref="@datePicker"
                            TValue="DateOnly"
                            DisabledDays="@disabledDays"
                            DateChanged="@SelectedDate"
                            Date="@selectedDate"
                            ReadOnly="true"
                            DisplayFormat="MMMM dd, yyyy" />
            </Addon>
            <Addon AddonType="AddonType.End">
                <Button Color="Blazorise.Color.Light" Clicked="@(()=>datePicker.ToggleAsync())">
                    <Icon Name="IconName.Calendar" />
                </Button>
            </Addon>
        </Addons>
        <br />
        @foreach (var day in schedules.DistinctBy(x => x.Date).Where(x => x.Playoffs == false))
        {
            <anchor id="@day.Date" />
            <Anchor To="" />
            <Card>
                <CardBody>
                    <CardTitle Size="4"></CardTitle>
                    <CardText>
                        <center><h3>@day.Date.ToLongDateString()</h3></center>
                        <center><h4>Week: @day.Week_Id</h4></center>
                        <Table Striped
                               Bordered
                               Responsive>
                            <TableHeader ThemeContrast="ThemeContrast.Dark">
                                <TableRow>
                                    <TableHeaderCell><center>Win</center></TableHeaderCell>
                                    <TableHeaderCell><center>Home Team</center></TableHeaderCell>
                                    <TableHeaderCell></TableHeaderCell>
                                    <TableHeaderCell><center>Away Team</center></TableHeaderCell>
                                    <TableHeaderCell><center>Win</center></TableHeaderCell>
                                    <TableHeaderCell><center>Table Number</center></TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            @foreach (var d in schedules.Where(x => x.Date == day.Date))
                            {
                                <TableBody>
                                    @if (teams != null)
                                    {
                                        <TableRow>
                                            <TableRowCell><center><Check Checked="@HomeWinChecked(d.Week_Id, d.Home_Team).Result" Disabled /></center></TableRowCell>
                                            <TableRowCell><center>@teams.Where(x => x.Id == d.Home_Team).First().TeamName</center></TableRowCell>
                                            <TableRowCell><center>vs</center></TableRowCell>
                                            <TableRowCell><center>@teams.Where(x => x.Id == d.Away_Team).First().TeamName</center></TableRowCell>
                                            <TableRowCell><center><Check Checked="@AwayWinChecked(d.Week_Id, d.Away_Team).Result" Disabled /></center></TableRowCell>
                                            <TableRowCell><center>@d.Table_Number</center></TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            }
                        </Table>
                    </CardText>
                </CardBody>
            </Card>
            <br />
        }
        </CardText>
    </CardBody>
</Card>
<Button Shadow="Blazorise.Shadow.Default"
        Style="position:fixed; bottom: 10px; right: 0; margin-right: 16px; opacity: .5"
        Color="Color.Dark"
        TextColor="TextColor.Light"
        Clicked="@ScrollToTop">
    <Icon Name="IconName.ArrowUp" />
</Button>




@code {
    [CascadingParameter]
    private LoadingIndicator loadingIndicator { get; set; } = new();

    private APIService aPIService = new();
    private RosterHelper RosterHelper = new();
    private TeamHelper teamHelper = new();
    private WeekHelper weekHelper = new();
    private List<Schedules> schedules = [];
    private List<TeamDetails> teams = [];
    private List<TeamStats> teamStats = [];
    private List<WeekFullInfo> weeks = [];
    private WeekFullInfo? homeWeek = new();
    private CUNextTusday cUNextTusday = new();
    private DayOfWeek[] disabledDays = [];
    private DatePicker<DateOnly> datePicker { get; set; }
    public DateOnly selectedDate = new();
    private int renderCount;


    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        disabledDays = new[]
        {
            DayOfWeek.Sunday,
            DayOfWeek.Monday,
            DayOfWeek.Wednesday,
            DayOfWeek.Thursday,
            DayOfWeek.Friday,
            DayOfWeek.Saturday
        };
        teams = await aPIService.GetTeamDetails();
        schedules = await RosterHelper.GetSchedules();
        teamStats = await teamHelper.GetAllTeamStats();
        weeks = await weekHelper.GetFullWeek();
        await loadingIndicator.Hide();

    }

        /*protected override void OnAfterRender(bool firstRender)
        {
            selectedDate = cUNextTusday.GetNextTuesday(DateOnly.FromDateTime(DateTime.Now));
            if (firstRender)
            {
                SelectedDate(selectedDate);
    }
        }*/

    async Task<bool> HomeWinChecked(int WeekId, int HomeId)
        {
            await loadingIndicator.Show();
            homeWeek = weeks.Where(x => x.WeekNumber == WeekId && x.Home_Team == HomeId && x.WinningTeamId == HomeId).FirstOrDefault();
            if (homeWeek == null)
            {
    await loadingIndicator.Hide();
    return false;
            }
            if (homeWeek.WinningTeamId == HomeId)
            {
    await loadingIndicator.Hide();
    return true;
            }
            else
            {
    await loadingIndicator.Hide();
    return false;
            }

        }

        async Task<bool> AwayWinChecked(int WeekId, int AwayId)
        {
            await loadingIndicator.Show();
            homeWeek = weeks.Where(x => x.WeekNumber == WeekId && x.Away_Team == AwayId && x.WinningTeamId == AwayId).FirstOrDefault();

            if (homeWeek == null)
            {
    await loadingIndicator.Hide();
    return false;
            }
            if (homeWeek.WinningTeamId == AwayId)
            {
    await loadingIndicator.Hide();
    return true;
            }
            else
            {
    await loadingIndicator.Hide();
    return false;
            }
        }

        private void SelectedDate(DateOnly selectedDate)
        {
            string uri = navigationManager.Uri.ToString();
            if (!uri.Contains("#"))
            {
    uri = uri + "#";
            }
            navigationManager.NavigateTo($"{uri}{selectedDate}");
        }
        private void ScrollToTop()
        {
            string uri = navigationManager.Uri.ToString();
            if (!uri.Contains("#"))
            {
    uri = uri + "#";
            }
            navigationManager.NavigateTo($"{uri}top");
        }
}
