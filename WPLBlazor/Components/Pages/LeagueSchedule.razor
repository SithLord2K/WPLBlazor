@attribute [StreamRendering]
@using Schedules = WPLBlazor.Data.Models.Schedule
@using WPLBlazor.Data.Services
@inject NavigationManager navigationManager

<PageTitle>Schedule</PageTitle>

<center>
<SfSchedule TValue="ScheduleData" Height="Auto" Width="Auto"  CurrentView="View.Month" ShowWeekend="false" Readonly SelectedDate="@selectedDate">
    <ScheduleEventSettings DataSource="@scheduleData"></ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Month" ></ScheduleView>
    </ScheduleViews>
    </SfSchedule>
</center>

<ScrollToTop />

@code {
    [CascadingParameter]
    private LoadingIndicator loadingIndicator { get; set; } = new();

    private readonly RosterHelper rosterHelper;
    private readonly TeamHelper teamHelper;
    private readonly WeekHelper weekHelper;
    private readonly DataFactory aPIService;

    private List<ScheduleData> scheduleData = new();
    private List<Schedules> schedules = [];
    private List<TeamDetail> teams = [];
    private List<TeamStats> teamStats = [];
    private List<WeekFullInfo> weeks = [];
    private WeekFullInfo? homeWeek = new();
    private DayOfWeek[] disabledDays = [];
    private DatePicker<DateOnly> datePicker { get; set; }
    public DateTime selectedDate { get; set; }

    int id;

    public LeagueSchedule(RosterHelper rosterHelper, TeamHelper teamHelper, WeekHelper weekHelper, DataFactory aPIService)
    {
        this.rosterHelper = rosterHelper;
        this.teamHelper = teamHelper;
        this.weekHelper = weekHelper;
        this.aPIService = aPIService;
    }

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        disabledDays = new[]
        {
            DayOfWeek.Sunday,
            DayOfWeek.Monday,
            DayOfWeek.Wednesday,
            DayOfWeek.Thursday,
            DayOfWeek.Friday,
            DayOfWeek.Saturday
        };
        teams = await aPIService.GetTeamDetails();
        schedules = await rosterHelper.GetSchedules();
        teamStats = await teamHelper.GetAllTeamStats();
        weeks = await weekHelper.GetFullWeek();
        selectedDate = DateTime.Now;
        await LoadSchedule();
        await loadingIndicator.Hide();

    }

    async Task LoadSchedule()
    {
        foreach (var day in schedules.DistinctBy(x => x.Date).Where(x => x.Playoffs == false))
        {
            foreach (var d in schedules.Where(x => x.Date == day.Date))
            {
                scheduleData.Add(new ScheduleData
                    {
                        Id = id++,
                        CalendarId = d.Week_Id,
                        Subject = $"{teams.Where(x => x.Id == d.Home_Team).First().TeamName} vs {teams.Where(x => x.Id == d.Away_Team).First().TeamName}",
                        StartTime = d.Date.ToDateTime(TimeOnly.Parse("7:30 PM")),
                        EndTime = d.Date.ToDateTime(TimeOnly.Parse("11:59 PM")),
                        IsAllDay = false,
                        Location = $"Table: {d.Table_Number}"
                    });
            }
        }
    }

    async Task<bool> HomeWinChecked(int WeekId, int HomeId)
    {
        await loadingIndicator.Show();
        homeWeek = weeks.Where(x => x.WeekNumber == WeekId && x.Home_Team == HomeId && x.WinningTeamId == HomeId).FirstOrDefault();
        if (homeWeek == null)
        {
            await loadingIndicator.Hide();
            return false;
        }
        if (homeWeek.WinningTeamId == HomeId)
        {
            await loadingIndicator.Hide();
            return true;
        }
        else
        {
            await loadingIndicator.Hide();
            return false;
        }

    }

    async Task<bool> AwayWinChecked(int WeekId, int AwayId)
    {
        await loadingIndicator.Show();
        homeWeek = weeks.Where(x => x.WeekNumber == WeekId && x.Away_Team == AwayId && x.WinningTeamId == AwayId).FirstOrDefault();

        if (homeWeek == null)
        {
            await loadingIndicator.Hide();
            return false;
        }
        if (homeWeek.WinningTeamId == AwayId)
        {
            await loadingIndicator.Hide();
            return true;
        }
        else
        {
            await loadingIndicator.Hide();
            return false;
        }
    }

    private void SelectedDate(DateOnly selectedDate)
    {
        string uri = navigationManager.Uri.ToString();
        if (!uri.Contains("#"))
        {
            uri = uri + "#";
        }
        navigationManager.NavigateTo($"{uri}{selectedDate}");
    }

}
