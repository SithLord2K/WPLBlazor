@page "/leaderboard"
@attribute [StreamRendering]

<PageTitle>Leaderboards</PageTitle>

<h1>Leaderboards</h1>
<br />

@if (teamStats == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Card>
        <CardBody>
            <CardTitle Size="3">
                Team Leaderboard
            </CardTitle>
            <Divider />
            <CardText>
                <DataGrid TItem="TeamStats"
                          @ref="teamGrid"
                          Data="@teamStats"
                          PageSize="5"
                          SortMode="DataGridSortMode.Single"
                          Sortable
                          Bordered
                          ShowPager
                          Responsive
                          ResponsiveMode="@TableResponsiveMode.Mobile">
                    <DataGridColumns>
                        <DataGridCommandColumn>
                            <DataGridColumn Field="@nameof(TeamStats.TeamName)" Caption="Team" Sortable="true" />
                            <DataGridColumn Field="@nameof(TeamStats.TotalGamesPlayed)" Caption="Last Name" Sortable="true" />
                            <DataGridColumn Field="@nameof(TeamStats.TotalGamesWon)" Caption="Games Played" Sortable="true" />
                            <DataGridColumn Field="@nameof(TeamStats.TotalGamesLost)" Caption="Games Won" Sortable="true" />
                            <DataGridColumn Field="@nameof(TeamStats.TotalAverage)" Caption="Average" Sortable="true" />
                        </DataGridCommandColumn>
                    </DataGridColumns>
                </DataGrid>
            </CardText>
        </CardBody>
    </Card>
    <br />
    <Card>
        <CardBody>
            <CardTitle Size="3">
                Player Leaderboard
            </CardTitle>
            <Divider />
            <CardText>
                <DataGrid TItem="PDataModel"
                          @ref="dataGrid"
                          Data="@pData"
                          PageSize="10"
                          SortMode="DataGridSortMode.Single"
                          Sortable
                          Bordered
                          ShowPager
                          Responsive
                          ResponsiveMode="@TableResponsiveMode.Mobile">
                    <DataGridColumns>
                        <DataGridCommandColumn>
                            <DataGridColumn Field="@nameof(PDataModel.FirstName)" Caption="First Name" Sortable="true" />
                            <DataGridColumn Field="@nameof(PDataModel.LastName)" Caption="Last Name" Sortable="true" />
                            <DataGridColumn Field="@nameof(PDataModel.GamesPlayed)" Caption="Games Played" Sortable="true" Filterable FilterMethod="DataGridColumnFilterMethod.Equals" />
                            <DataGridColumn Field="@nameof(PDataModel.GamesWon)" Caption="Games Won" Sortable="true" />
                            <DataGridColumn Field="@nameof(PDataModel.GamesLost)" Caption="Games Lost" Sortable="true" />
                            <DataGridColumn Field="@nameof(PDataModel.Average)" Caption="Average" Sortable="true" />
                            <DataGridColumn Field="@nameof(PDataModel.TeamName)" Caption="Team" Sortable="true" Filterable FilterMethod="DataGridColumnFilterMethod.Equals" />
                        </DataGridCommandColumn>
                    </DataGridColumns>
                    <EmptyTemplate>
                        <div class="box">
                            No Player Stats Found!
                        </div>
                    </EmptyTemplate>
                </DataGrid>
            </CardText>
        </CardBody>
    </Card>
}

@code {
    [CascadingParameter]
    LoadingIndicator? loadingIndicator { get; set; }

    private APIService aPIService = new();
    private TeamHelper teamHelper = new();
    private PlayerHelpers playerHelper = new();
    private PDataService pDataService = new();

    private List<TeamStats> teamStats = new();
    private List<TeamDetails> teamDetails = [];
    private List<Players> playerData = [];
    private List<PDataModel> pData = [];
    private PDataModel pDataModel = new();
    private DataGrid<PDataModel> dataGrid;
    private DataGrid<TeamStats> teamGrid;


    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        teamDetails = await playerHelper.GetTeamDetails();
        playerData = await playerHelper.ConsolidatePlayer();
        teamStats = await teamHelper.GetAllTeamStats();
        pData = await pDataService.GetFullPlayerData();

        await dataGrid.ApplySorting(new DataGridSortColumnInfo(nameof(PDataModel.Average), SortDirection.Descending));
        await teamGrid.ApplySorting(new DataGridSortColumnInfo(nameof(TeamStats.TotalAverage), SortDirection.Descending));
        await base.OnInitializedAsync();
        await loadingIndicator.Hide();
    }
}
