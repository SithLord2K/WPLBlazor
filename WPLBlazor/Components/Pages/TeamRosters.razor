@page "/rosters"
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Routing
@using Roster = WPLBlazor.Models.Roster

<PageTitle>Team Rosters</PageTitle>

<h1>Rosters</h1>
<br />
@if (teams is not null)
{
    <Card>
        <Table Bordered Striped Responsive>
            <TableHeader Width="Width.Auto">

            </TableHeader>
            @foreach (var team in teams)
            {
                @if (team.TeamName == "Bye")
                {
                    continue;
                }
                <TableBody Width="Width.Auto">
                    <TableRowGroup Title="@team.TeamName">
                        <TableHeaderCell><center>Name</center></TableHeaderCell>
                        <TableHeaderCell><center>Games Played</center></TableHeaderCell>
                        <TableHeaderCell><center>Captain?</center></TableHeaderCell>
                        @foreach (var roster in rosters.Where(x => x.TeamId == team.Id))
                        {
                            <TableRow>
                                <TableRowCell><center><a href="/player_detail/@roster.Player_Id">@roster.Player_Name</a></center></TableRowCell>
                                @if (players is not null)
                                {
                                    <TableRowCell><center>@players.Where(x => x.Id == roster.Player_Id).First().GamesPlayed</center></TableRowCell>
                                }
                                @if (roster.Player_Id == roster.Captain_Player_Id)
                                {
                                    <TableRowCell><center><Icon Name="IconName.Check" /></center></TableRowCell>
                                }
                                else
                                {
                                    <TableRowCell></TableRowCell>
                                }
                            </TableRow>
                        }
                    </TableRowGroup>
                </TableBody>
            }
        </Table>
    </Card>
    <br />
}

@code {
    [CascadingParameter]
    LoadingIndicator loadingIndicator { get; set; } = new();

    private APIService aPIService = new();
    private RosterHelper rosterHelper = new();
    private PlayerHelpers playerHelpers = new();

    private List<Players>? players = [];
    private List<TeamDetails> teams = [];
    private List<Roster> rosters = [];

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        players = await playerHelpers.ConsolidatePlayer();
        teams = await aPIService.GetTeamDetails();
        rosters = await rosterHelper.GetRoster();
        await loadingIndicator.Hide();
    }
}
