@page "/rosters"
@attribute [StreamRendering]
@using Roster = WPLBlazor.Models.Roster

<PageTitle>Team Rosters</PageTitle>


@if (teams is not null)
{
    <Card Padding="Padding.Is2">
        <CardBody>
            <CardTitle Size="3">Rosters</CardTitle>
            <Divider />
            <CardText>
                <Table Bordered Striped Responsive>
                    <TableHeader Border="Border.Is1" Width="Width.Auto">
                    </TableHeader>
                    @foreach (var team in teams)
                    {
                        @if (team.TeamName == "Bye")
                        {
                            continue;
                        }
                        <TableBody Width="Width.Auto">
                            <TableRowGroup Title="@team.TeamName">
                                <TableHeaderCell TextAlignment="TextAlignment.Center">Name</TableHeaderCell>
                                <TableHeaderCell TextAlignment="TextAlignment.Center">Games Played</TableHeaderCell>
                                <TableHeaderCell TextAlignment="TextAlignment.Center">Captain?</TableHeaderCell>
                                @foreach (var roster in rosters.Where(x => x.TeamId == team.Id))
                                {
                                    <TableRow>
                                        <TableRowCell><center><a href="/player_detail/@roster.Player_Id">@roster.Player_Name</a></center></TableRowCell>
                                        @if (players is not null)
                                        {
                                            <TableRowCell TextAlignment="TextAlignment.Center">@players.Where(x => x.Id == roster.Player_Id).First().GamesPlayed</TableRowCell>
                                        }
                                        @if (roster.Player_Id == roster.Captain_Player_Id)
                                        {
                                            <TableRowCell TextAlignment="TextAlignment.Center"><Icon Name="IconName.Check" /></TableRowCell>
                                        }
                                        else
                                        {
                                            <TableRowCell></TableRowCell>
                                        }
                                    </TableRow>
                                }
                            </TableRowGroup>
                        </TableBody>
                    }
                </Table>
            </CardText>
        </CardBody>
    </Card>
    <br />
}

@code {
    [CascadingParameter]
    LoadingIndicator loadingIndicator { get; set; } = new();

    private APIService aPIService = new();
    private RosterHelper rosterHelper = new();
    private PlayerHelpers playerHelpers = new();

    private List<Players>? players = [];
    private List<TeamDetails> teams = [];
    private List<Roster> rosters = [];

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        players = await playerHelpers.ConsolidatePlayer();
        teams = await aPIService.GetTeamDetails();
        rosters = await rosterHelper.GetRoster();
        await loadingIndicator.Hide();
    }
}
