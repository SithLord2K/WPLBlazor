@page "/team_rosters"
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Routing
@using Roster = WPLBlazor.Models.Roster
@inject NavigationManager NavManager


<PageTitle>Team Rosters</PageTitle>

<h1>Team Rosters</h1>
<br />

@if (teams == null || players == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var team in teams)
    {
        <Card>
            <CardBody>
                <CardTitle Size="4">@team.TeamName</CardTitle>
                <hr />
                <CardText>
                    <table width="100%">
                        <tbody>
                            <tr>
                                <th widht="33%">Player Name</th>
                                 <!--<th width="25%">Average</th>-->
                                <th width="33%"></th>
                                <th width="33%">Captain?</th>
                            </tr>
                            @foreach (var roster in rosters.Where(x => x.TeamId == team.Id))
                            {
                            <tr>
                                <td><a href="/player_detail/@roster.Player_Id">@roster.Player_Name</a></td>
                                    <!--<td>average_placeholder</td>-->
                                    <td></td>
                                @if (roster.Player_Id == roster.Captain_Player_Id)
                                            {
                                        <td><Icon Name="IconName.Check" /></td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }

                                </tr>
                            }

                        </tbody>
                    </table>
                </CardText>
            </CardBody>
        </Card>

        <br />
    }

}

@code {
    
    private APIService aPIService = new();
    private RosterHelper RosterHelper = new();
    private List<Player> players = [];
    private List<TeamDetails> teams = [];
    private List<Roster> rosters = [];

    protected override async Task OnInitializedAsync()
    {
        teams = await aPIService.GetTeamDetails();
        rosters = await RosterHelper.GetRoster();
    }
    

}
