@attribute [StreamRendering]
@using Schedules = WPLBlazor.Data.Models.Schedule
@using WPLBlazor.Data.Services
@inject DataFactory aPIService
@inject NavigationManager navigationManager

<PageTitle>Playoffs Schedule</PageTitle>

<SfSchedule TValue="ScheduleData"  Height="Auto" Width="Auto" CurrentView="View.Month" ShowWeekend="false" Readonly @bind-SelectedDate="@selectedDate">
    <ScheduleEventSettings DataSource="@scheduleData"></ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Month" ShowWeekend="false"></ScheduleView>
    </ScheduleViews>
</SfSchedule>

<ScrollToTop />

@code {
    [CascadingParameter]
    private LoadingIndicator loadingIndicator { get; set; } = new();

    private readonly RosterHelper RosterHelper;
    private readonly TeamHelper teamHelper;
    private readonly WeekHelper weekHelper;
    private List<Schedule> schedules = [];
    private List<TeamDetail> teams = [];
    private List<TeamStats> teamStats = [];
    private List<WeekFullInfo> weeks = [];
    private List<ScheduleData> scheduleData = [];
    private WeekFullInfo? homeWeek = new();
    public DateTime selectedDate { get; set; }
    int id;

    public LeaguePlayoffs(RosterHelper rosterHelper, TeamHelper teamHelper, WeekHelper weekHelper)
    {
        RosterHelper = rosterHelper;
        this.teamHelper = teamHelper;
        this.weekHelper = weekHelper;
    }

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        teams = await aPIService.GetTeamDetails();
        schedules = await RosterHelper.GetSchedules();
        teamStats = await teamHelper.GetAllTeamStats();
        weeks = await weekHelper.GetFullWeek();
        selectedDate = DateTime.Now;
        await LoadSchedule();
        await loadingIndicator.Hide();

    }

    async Task LoadSchedule()
    {
        foreach (var day in schedules.DistinctBy(x => x.Date).Where(x => x.Playoffs == true))
        {
            foreach (var d in schedules.Where(x => x.Date == day.Date))
            {
                scheduleData.Add(new ScheduleData
                    {
                        Id = id++,
                        CalendarId = d.Week_Id,
                        Subject = $"{teams.Where(x => x.Id == d.Home_Team).First().TeamName} vs {teams.Where(x => x.Id == d.Away_Team).First().TeamName}",
                        StartTime = d.Date.ToDateTime(TimeOnly.Parse("7:30 PM")),
                        EndTime = d.Date.ToDateTime(TimeOnly.Parse("11:59 PM")),
                        IsAllDay = false,
                        Location = $"Table: {d.Table_Number}"
                    });
            }
        }
    }
}
