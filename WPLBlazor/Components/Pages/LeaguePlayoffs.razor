@page "/playoffs"
@attribute [StreamRendering]
@using Schedules = WPLBlazor.Data.Models.Schedule
@using WPLBlazor.Data.Services
@inject DataFactory aPIService
@inject NavigationManager navigationManager

<PageTitle>Playoffs Schedule</PageTitle>

@* <Card Padding="Padding.Is2">
    <CardBody>
        <CardTitle Size="3">Playoff Schedule</CardTitle>
        <Divider />
        <CardText>
            @foreach (var day in schedules.DistinctBy(x => x.Date).Where(x => x.Playoffs == true))
            {
                <Card Padding="Padding.Is2">
                    <CardBody>
                        <CardTitle>

                        </CardTitle>
                        <CardText TextAlignment="TextAlignment.Center">
                            <h3>@day.Date.ToLongDateString()</h3>
                            <h4>Week: @day.Week_Id_Playoff</h4>
                            <Table Striped Bordered Responsive>
                                <TableHeader ThemeContrast="ThemeContrast.Dark">
                                    <TableRow>
                                        <TableHeaderCell TextAlignment="TextAlignment.Center">Home Team</TableHeaderCell>
                                        <TableHeaderCell TextAlignment="TextAlignment.Center"></TableHeaderCell>
                                        <TableHeaderCell TextAlignment="TextAlignment.Center">Away Team</TableHeaderCell>
                                        <TableHeaderCell TextAlignment="TextAlignment.Center">Table #</TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                @foreach (var d in schedules.Where(x => x.Playoffs == true))
                                {
                                    <TableBody>
                                        @if (teams != null)
                                        {
                                            <TableRow>
                                                <TableRowCell TextAlignment="TextAlignment.Center">@teams.Where(x => x.Id == d.Home_Team).First().TeamName</TableRowCell>
                                                <TableRowCell TextAlignment="TextAlignment.Center">vs</TableRowCell>
                                                <TableRowCell TextAlignment="TextAlignment.Center">@teams.Where(x => x.Id == d.Away_Team).First().TeamName</TableRowCell>
                                                <TableRowCell TextAlignment="TextAlignment.Center">@d.Table_Number</TableRowCell>
                                            </TableRow>
                                        }
                                    </TableBody>
                                }
                            </Table>
                        </CardText>
                    </CardBody>
                </Card>
            }
        </CardText>
    </CardBody>
</Card> *@
<SfSchedule TValue="ScheduleData" Height="100%" Width="100%" CurrentView="View.Month" Readonly SelectedDate="@selectedDate">
    <ScheduleEventSettings DataSource="@scheduleData"></ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Month" ShowWeekend="false"></ScheduleView>
    </ScheduleViews>
</SfSchedule>

<ScrollToTop />

@code {
    [CascadingParameter]
    private LoadingIndicator loadingIndicator { get; set; } = new();

    private readonly RosterHelper RosterHelper;
    private readonly TeamHelper teamHelper;
    private readonly WeekHelper weekHelper;
    private List<Schedule> schedules = [];
    private List<TeamDetail> teams = [];
    private List<TeamStats> teamStats = [];
    private List<WeekFullInfo> weeks = [];
    private List<ScheduleData> scheduleData = [];
    private WeekFullInfo? homeWeek = new();
    public DateTime selectedDate = new();
    int id;

    public LeaguePlayoffs(RosterHelper rosterHelper, TeamHelper teamHelper, WeekHelper weekHelper)
    {
        RosterHelper = rosterHelper;
        this.teamHelper = teamHelper;
        this.weekHelper = weekHelper;
    }

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        teams = await aPIService.GetTeamDetails();
        schedules = await RosterHelper.GetSchedules();
        teamStats = await teamHelper.GetAllTeamStats();
        weeks = await weekHelper.GetFullWeek();
        selectedDate = DateTime.Now.Date;
        await LoadSchedule();
        await loadingIndicator.Hide();

    }

    async Task LoadSchedule()
    {
        foreach (var day in schedules.DistinctBy(x => x.Date).Where(x => x.Playoffs == true))
        {
            foreach (var d in schedules.Where(x => x.Date == day.Date))
            {
                scheduleData.Add(new ScheduleData
                    {
                        Id = id++,
                        CalendarId = d.Week_Id,
                        Subject = $"{teams.Where(x => x.Id == d.Home_Team).First().TeamName} vs {teams.Where(x => x.Id == d.Away_Team).First().TeamName}",
                        StartTime = d.Date.ToDateTime(TimeOnly.Parse("7:30 PM")),
                        EndTime = d.Date.ToDateTime(TimeOnly.Parse("11:59 PM")),
                        IsAllDay = false,
                        Location = $"Table: {d.Table_Number}"
                    });
            }
        }
    }
}
