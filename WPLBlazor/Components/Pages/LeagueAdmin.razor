@page "/league_admin"
@attribute [StreamRendering]

<PageTitle>Admin Panel</PageTitle>
<h1>AdminPanel</h1>
<br />
<Card>
    <CardBody>
        <CardTitle Size="3">Admin Functions</CardTitle>
        <CardText>
            <Divider />
            <Button Color="Color.Success" Clicked="@ShowPlayerModal">Add/Edit Players</Button>
            &nbsp;
            <Button Color="Color.Success" Clicked="@ShowTeamModal">Add/Edit Teams</Button>
            &nbsp;
            <Button Color="Color.Success" Clicked="@ShowScheduleModal">Add/Edit Schedules</Button>
            &nbsp;
            <Button Color="Color.Success" Clicked="@ShowPlayerDataModal">Add/Edit Player Games</Button>
        </CardText>
    </CardBody>
</Card>
<br />
<!--Player Edit Modal-->
<Modal @ref="modalAddPlayer">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add/Edit Player</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Form>
                <Field>
                    <Fields>
                        <Field ColumnSize="ColumnSize.IsFull">
                            <Select TValue="int" SelectedValueChanged="@LoadPlayer">
                                <SelectItem>Select a Player to Edit</SelectItem>
                                @foreach (var p1 in players)
                                {
                                    <SelectItem Value="@p1.Id">@p1.FirstName @p1.LastName</SelectItem>
                                }
                            </Select>
                        </Field>
                    </Fields>
                </Field>
                <Field>
                    <Fields>
                        <Field ColumnSize="ColumnSize.IsHalf">
                            <FieldLabel>First Name:</FieldLabel>
                            <FieldBody><TextEdit @bind-Text="@player.FirstName" MaskType="MaskType.RegEx" EditMask="^[a-zA-Z ]*$" /></FieldBody>
                        </Field>
                        <Field>
                            <FieldLabel ColumnSize="ColumnSize.IsHalf">Last Name:</FieldLabel>
                            <FieldBody><TextEdit @bind-Text="@player.LastName" MaskType="MaskType.RegEx" EditMask="^[a-zA-Z ]*$" /></FieldBody>
                        </Field>
                    </Fields>
                    <Fields>
                        <Field>
                            <FieldLabel>Team:</FieldLabel>
                            <FieldBody>
                                <Select TValue="int" SelectedValue="@player.TeamId" SelectedValueChanged="@PlayerTeamSelected">
                                    <SelectItem>Select A Team</SelectItem>
                                    @foreach (var t in teams)
                                    {
                                        <SelectItem Value="@t.Id">@t.TeamName</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </Fields>
                    <Fields>
                        <Field>
                            <FieldBody>
                                <Button Color="Color.Success" Clicked="@AddPlayerClicked">Add Player</Button>&nbsp;
                                <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                            </FieldBody>
                        </Field>
                    </Fields>
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<!--Team Edit Modal-->
<Modal @ref="modalAddTeam">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add/Edit Teams</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Form>
                <Field>
                    <Fields>
                        <Field ColumnSize="ColumnSize.IsFull">
                            <Select TValue="int" SelectedValueChanged="@LoadTeam">
                                <SelectItem>Select a Team to Edit</SelectItem>
                                @foreach (var t1 in teams)
                                {
                                    <SelectItem Value="@t1.Id">@t1.TeamName</SelectItem>
                                }
                            </Select>
                        </Field>
                    </Fields>
                </Field>
                <Field>
                    <Fields>
                        <Field ColumnSize="ColumnSize.IsHalf">
                            <FieldLabel>Team Name:</FieldLabel>
                            <FieldBody><TextEdit @bind-Text="@addTeam.TeamName" /></FieldBody>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsHalf">
                            <FieldLabel>Team:</FieldLabel>
                            <FieldBody>
                                <Select TValue="int" SelectedValue="@addTeam.Captain_Player_Id" SelectedValueChanged="@TeamCaptainSelected">
                                    <SelectItem>Select A Captain</SelectItem>
                                    @foreach (var p in players)
                                    {
                                        <SelectItem Value="@p.Id">@p.FirstName @p.LastName</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </Fields>
                    <Fields>
                        <Field>
                            <FieldBody>
                                <Button Color="Color.Success" Clicked="@AddTeamClicked">Add Team</Button>&nbsp;
                                <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                            </FieldBody>
                        </Field>
                    </Fields>
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<!--Schedule Modal-->
<Modal @ref="modalAddSchedule">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add/Edit Schedule</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Form>
                <Field>
                    <Fields>
                        <Field ColumnSize="ColumnSize.IsFull">
                            <FieldBody>
                                <Select TValue="int" SelectedValueChanged="@LoadSchedule">
                                    <SelectItem>Select Schedule to Edit</SelectItem>
                                    @foreach (var s in schedules)
                                    {
                                        <SelectItem Value="@s.Id">Week @s.Week_Id, Date: @s.Date, Home Team: @teams.Where(x => x.Id == s.Home_Team).FirstOrDefault().TeamName, Away Team: @teams.Where(x => x.Id == s.Away_Team).FirstOrDefault().TeamName </SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </Fields>
                    <Field ColumnSize="ColumnSize.IsFull">
                        <Fields>
                            <FieldLabel>Date</FieldLabel>
                            <FieldBody>
                                <DateEdit @bind-Date="@schedule.Date" />
                            </FieldBody>
                        </Fields>
                    </Field>
                    <Field>
                        <Fields>
                            <FieldLabel>Home Team</FieldLabel>
                            <FieldBody>
                                <Select TValue="int" SelectedValue="@schedule.Home_Team">
                                    <SelectItem> Select Home Team</SelectItem>
                                    @foreach (var t3 in teams)
                                    {
                                        <SelectItem Value="@t3.Id">@t3.TeamName</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Fields>
                    </Field>
                    <Field>
                        <Fields>
                            <FieldLabel>Away Team</FieldLabel>
                            <FieldBody>
                                <Select TValue="int" SelectedValue="@schedule.Away_Team">
                                    <SelectItem> Select Away Team</SelectItem>
                                    @foreach (var t4 in teams)
                                    {
                                        <SelectItem Value="@t4.Id">@t4.TeamName</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Fields>
                    </Field>
                    <Field>
                        <Fields>
                            <Field>
                                <FieldBody>
                                    <Button Color="Color.Success" Clicked="@AddScheduleClicked">Add Team</Button>&nbsp;
                                    <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                                </FieldBody>
                            </Field>
                        </Fields>
                    </Field>
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<!--PlayerData Modal-->
<Modal @ref="modalAddPlayerData">
    <ModalContent Centered Scrollable>
        <ModalHeader>
            <ModalTitle>Add/Edit Player Games</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Form>
                <Field>
                    <Field>
                        <Fields>
                            <Field ColumnSize="ColumnSize.IsFull">
                                <Select TValue="int" SelectedValue="@player.Id" SelectedValueChanged="@LoadPlayer">
                                    <SelectItem>Choose Player To Add Games To</SelectItem>
                                    @foreach (var p5 in players)
                                    {
                                        <SelectItem Value="@p5.Id">@p5.FirstName @p5.LastName</SelectItem>
                                    }
                                </Select>
                            </Field>
                        </Fields>
                    </Field>
                    <Field>
                        <Fields>
                            <Field ColumnSize="ColumnSize.IsFull">
                                <FieldLabel>Player Name:</FieldLabel>
                                <FieldBody>
                                    <TextEdit @bind-Text="@player.FirstName" Disabled />
                                    <NumericPicker @bind-Value="@player.Id" onchanged="@LoadPlayerData(player.Id)" hidden />
                                </FieldBody>
                            </Field>
                        </Fields>
                    </Field>
                    <Fields>
                        <FieldLabel>Week Number:</FieldLabel>
                        <FieldBody>
                            <NumericPicker @bind-Value="@playerData.WeekNumber" onchange="@DoesWeekExist()" />
                        </FieldBody>
                        <FieldLabel>Games Won:</FieldLabel>
                        <FieldBody>
                            <NumericPicker @bind-Value="@playerData.GamesWon" onchange="@GamesPlayedCalc()" />
                        </FieldBody>
                        <FieldLabel>Games Lost:</FieldLabel>
                        <FieldBody>
                            <NumericPicker @bind-Value="@playerData.GamesLost" onchange="@GamesPlayedCalc()" />
                        </FieldBody>
                        <FieldLabel>Games Played:</FieldLabel>
                        <FieldBody>
                            <NumericPicker Value="@total" Disabled />
                        </FieldBody>
                    </Fields>
                    <Field></Field>
                    <Fields>
                        <Field>
                            <FieldBody>
                                <Button Color="Color.Success" Clicked="@AddPlayerDataClicked">Modify Player Games</Button>&nbsp;
                                <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                            </FieldBody>
                        </Field>
                    </Fields>
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<br />


@code {
    [Inject] private IToastService ToastService { get; set; }

    private Modal modalAddPlayer = new();
    private Modal modalAddTeam = new();
    private Modal modalAddSchedule = new();
    private Modal modalAddPlayerData = new();

    private Player player { get; set; } = new();
    private PlayerData playerData { get; set; } = new();
    private TeamDetails addTeam { get; set; } = new();
    private Schedules schedule { get; set; } = new();

    private APIService apiService = new();
    private PlayerHelpers playerHelper = new();

    private List<TeamDetails> teams = [];
    private List<Player> players = [];
    private List<Schedules> schedules = [];
    private List<PlayerData> pData = [];

    private int teamId;
    private int total;

    protected override async Task OnInitializedAsync()
    {
        teams = await apiService.GetTeamDetails();
        players = await apiService.GetAllPlayers();
        schedules = await apiService.GetSchedule();
        pData = await apiService.GetAllPlayerData();
    }

    //Form Tasks
    private async Task AddPlayerClicked()
    {
        await apiService.AddPlayer(player);
        await ToastService.Info($"Player {player.FirstName} {player.LastName} has been added or edited.", "Add/Edit Player", BuildToastInstanceOptions);
    }

    async Task AddTeamClicked()
    {
        await apiService.AddTeam(addTeam);
        await ToastService.Info($"Team {addTeam.TeamName} has been added or edited.", "Add/Edit Team", BuildToastInstanceOptions);
    }

    async Task AddScheduleClicked()
    {
        await apiService.AddSchedule(schedule);
        await ToastService.Info($"Schedule {addTeam.TeamName} has been added or edited.", "Add/Edit Schedule", BuildToastInstanceOptions);
    }

    async Task AddPlayerDataClicked()
    {
        playerData.GamesPlayed = playerData.GamesWon + playerData.GamesLost;
        playerData.PlayerId = player.Id;
        if (playerData.GamesWon != 0)
        {
            playerData.Average = Decimal.Round((decimal)playerData.GamesWon / ((decimal)playerData.GamesLost + (decimal)playerData.GamesWon) * 100, 2);
        }
        await apiService.SavePlayerData(playerData);
        await ToastService.Info($"{player.FirstName} {player.LastName}'s Games Updated.", "Add/Edit Schedule", BuildToastInstanceOptions);
    }

    //Select Field Tasks
    Task PlayerTeamSelected(int value)
    {
        player.TeamId = value;
        return Task.CompletedTask;
    }

    Task ScheduleSelected(DateOnly value)
    {
        schedule.Date = value;
        return Task.CompletedTask;
    }

    Task TeamCaptainSelected(int value)
    {
        addTeam.Captain_Player_Id = value;
        return Task.CompletedTask;
    }

    //Load Items
    async Task LoadPlayer(int value)
    {
        player = await apiService.GetSinglePlayer(value);

    }

    async Task LoadTeam(int value)
    {
        addTeam = await apiService.GetSingleTeam(value);
    }

    async Task LoadSchedule(int value)
    {
        schedule = await apiService.GetSingleSchedule(value);
    }

    async Task LoadPlayerData(int value)
    {
        playerData = await apiService.GetSinglePlayerData(value);
    }

    //Modal Tasks
    Task ShowPlayerModal()
    {
        return modalAddPlayer.Show();
    }

    Task ShowTeamModal()
    {
        return modalAddTeam.Show();
    }

    Task ShowScheduleModal()
    {
        return modalAddSchedule.Show();
    }

    Task ShowPlayerDataModal()
    {
        return modalAddPlayerData.Show();
    }

    //Misc Functions

    Task GamesPlayedCalc()
    {
        total = playerData.GamesWon + playerData.GamesLost;
        return Task.CompletedTask;
    }

    Task DoesWeekExist()
    {
        if (playerData.WeekNumber > 0)
        {
            var pid = player.Id;
            var wid = playerData.WeekNumber;
            playerData = pData.Where(x => x.WeekNumber == wid && x.PlayerId == pid).FirstOrDefault();
        }
        return Task.CompletedTask;
    }

    //Toast Service
    private void BuildToastInstanceOptions(ToastInstanceOptions toastInstanceOptions)
    {
        toastInstanceOptions.Animated = true;
        toastInstanceOptions.AnimationDuration = 300;
        toastInstanceOptions.Autohide = true;
        toastInstanceOptions.AutohideDelay = 3000;
    }


}
