@page "/league_admin"
@using WPLBlazor.Data.Services
@using WPLBlazor.Data.Models
@using WPLBlazor.Components.Modals
@attribute [StreamRendering]

<PageTitle>League Administration</PageTitle>
<Anchor id="top" />
<!--Buttons With Authorizations-->
<Card Padding="Padding.Is2">
    <CardBody>
        <CardTitle Size="3">Administration Functions</CardTitle>
        <CardText>Name: @Username</CardText>
        <CardText>Email: @Email</CardText>
        <CardText>Role: @Roles</CardText>
        <Divider />
        <CardText>
            <Table Responsive>
                <TableRow>
                    <TableRowCell>
                        <AuthorizeView Roles="League_Admin, Super_User">
                            <Tooltip Text="Use to add/edit players in the database.">
                                <Button Color="Color.Success" Clicked="@ShowPlayerModal">Add/Edit Players</Button>
                            </Tooltip>
                        </AuthorizeView>
                    </TableRowCell>
                    <TableRowCell>
                        <AuthorizeView Roles="League_Admin, Super_User, Captain">
                            <Tooltip Text="Use to add games won and lost for players.">
                                <Button Color="Color.Success" Clicked="@ShowPlayerDataModal">Add/Edit Player Games</Button>
                            </Tooltip>
                        </AuthorizeView>
                    </TableRowCell>
                    <TableRowCell>
                        <AuthorizeView Roles="League_Admin, Super_User">
                            <Tooltip Text="Use to add/edit teams in the database.">
                                <Button Color="Color.Success" Clicked="@ShowTeamModal">Add/Edit Teams</Button>
                            </Tooltip>
                        </AuthorizeView>
                    </TableRowCell>
                    <TableRowCell>
                        <AuthorizeView Roles="League_Admin, Super_User">
                            <Tooltip Text="Use to Add/edit the schedule.">
                                <Button Color="Color.Success" Clicked="@ShowScheduleModal">Add/Edit Schedules</Button>
                            </Tooltip>
                        </AuthorizeView>
                    </TableRowCell>
                    <TableRowCell>
                        <AuthorizeView Roles="League_Admin, Super_User, Captain">
                            <Tooltip Text="Use to add week stats, ie: Which team won, if there was a forfeit or if it is a playoff game.">
                                <Button Color="Color.Success" Clicked="@ShowWeeksModal">Add/Edit Weeks</Button>
                            </Tooltip>
                        </AuthorizeView>
                    </TableRowCell>
                </TableRow>
            </Table>
        </CardText>
    </CardBody>
</Card>
<ScrollToTop />


@code {
    [CascadingParameter]
    LoadingIndicator loadingIndicator { get; set; } = new();

    [Inject] private IModalService ModalService { get; set; }
   
    private List<Auth0Users> users = [];
    private AuthenticationState? state { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();

        //Authentication
        if (authenticationState is not null)
        {
            state = await authenticationState;
            if (state.User.Identity is not null)
            {
                Username = state.User.Identity.Name ?? string.Empty;
                UserId = state.User.Claims
                    .Where(c => c.Type.Equals(@"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;

                // Remove Auth0 prefix
                UserId = UserId.Split('|')[1];

                Email = state.User.Claims
                    .Where(c => c.Type.Equals(@"https://wpl.somee.com/email"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;

                Roles = state.User.Claims
                    .Where(c => c.Type.Equals(@"https://wpl.somee.com/roles"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;
            }
            await loadingIndicator.Hide();
        }
    }
 
    //Modal Tasks
    Task ShowPlayerModal()
    {
        return ModalService.Show<AddEditPlayerModel>("", new ModalInstanceOptions() { UseModalStructure = false });
    }

    Task ShowTeamModal()
    {
        return ModalService.Show<AddEditTeamModal>("", new ModalInstanceOptions() { UseModalStructure = false });
    }

    Task ShowScheduleModal()
    {
        return ModalService.Show<AddEditScheduleModal>("", new ModalInstanceOptions() { UseModalStructure = false });
    }

    Task ShowPlayerDataModal()
    {
        return ModalService.Show<AddEditPlayerDataModal>("", new ModalInstanceOptions() { UseModalStructure = false });
    }

    Task ShowWeeksModal()
    {
        return ModalService.Show<AddEditWeeksModal>("", new ModalInstanceOptions() { UseModalStructure = false });
    }

    //Authentication
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string Username = "Anonymous User";
    private string UserId = "";
    private string Email = "";
    private string Roles = "";
}
