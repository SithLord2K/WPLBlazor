@page "/league_admin"
@attribute [StreamRendering]

<PageTitle>League Administration</PageTitle>

<h1>League Administration</h1>
<br />
<p>Hello @Username!</p>
<p>Email: @Email</p>
<p>Role: @Roles</p>
<!--Buttons With Authorizations-->
<Card>
    <CardBody>
        <CardTitle Size="3">Administration Functions</CardTitle>
        <CardText>
            <Divider />
            <AuthorizeView Roles="League_Admin, Super_User">
                <Tooltip Text="Use to add/edit players in the database.">
                    <Button Color="Color.Success" Clicked="@ShowPlayerModal">Add/Edit Players</Button>
                </Tooltip>
            </AuthorizeView>
            &nbsp;
            <AuthorizeView Roles="League_Admin, Super_User, Captain">
                <Tooltip Text="Use to add games won and lost for players.">
                    <Button Color="Color.Success" Clicked="@ShowPlayerDataModal">Add/Edit Player Games</Button>
                </Tooltip>
            </AuthorizeView>
            &nbsp;
            <AuthorizeView Roles="League_Admin, Super_User">
                <Tooltip Text="Use to add/edit teams in the database.">
                    <Button Color="Color.Success" Clicked="@ShowTeamModal">Add/Edit Teams</Button>
                </Tooltip>
            </AuthorizeView>
            &nbsp;
            <AuthorizeView Roles="League_Admin, Super_User">
                <Tooltip Text="Use to Add/edit the schedule.">
                    <Button Color="Color.Success" Clicked="@ShowScheduleModal">Add/Edit Schedules</Button>
                </Tooltip>
            </AuthorizeView>
            &nbsp;
            <AuthorizeView Roles="League_Admin, Super_User, Captain">
                <Tooltip Text="Use to add week stats, ie: which team won, if there was a forfeit or if it is a playoff game.">
                    <Button Color="Color.Success" Clicked="@ShowWeeksModal">Add/Edit Weeks</Button>
                </Tooltip>
            </AuthorizeView>
        </CardText>
    </CardBody>
</Card>
<!--Player Add/Edit Modal-->
<Modal @ref="modalAddPlayer">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add/Edit Player</ModalTitle>
            <CloseButton AutoClose="true" />
        </ModalHeader>
        <ModalBody>
            <Form>
                <Field>
                    <Field ColumnSize="ColumnSize.IsFull">
                        <Select TValue="int" SelectedValueChanged="@LoadPlayer">
                            <SelectItem>Select a Player to Edit</SelectItem>
                            @if (players is not null)
                            {
                                @foreach (var p1 in players)
                                {
                                    <SelectItem Value="@p1.Id">@p1.FirstName @p1.LastName</SelectItem>
                                }
                            }
                        </Select>
                    </Field>
                    <Field>
                        @if (player is not null)
                        {
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.IsQuarter">First Name:</FieldLabel>
                                <FieldBody><TextEdit @bind-Text="@player.FirstName" MaskType="MaskType.RegEx" EditMask="^[a-zA-Z ]*$" /></FieldBody>
                            </Field>
                            <Field Horizontal>
                                <FieldLabel>Last Name:</FieldLabel>
                                <FieldBody><TextEdit @bind-Text="@player.LastName" MaskType="MaskType.RegEx" EditMask="^[a-zA-Z ]*$" /></FieldBody>
                            </Field>

                            <Field>
                                <FieldLabel>Team:</FieldLabel>
                                <FieldBody>
                                    <Select TValue="int" SelectedValue="@player.TeamId" SelectedValueChanged="@PlayerTeamSelected">
                                        <SelectItem>Select A Team</SelectItem>
                                        @if (teams is not null)
                                        {
                                            @foreach (var t in teams)
                                            {
                                                <SelectItem Value="@t.Id">@t.TeamName</SelectItem>
                                            }
                                        }
                                    </Select>
                                </FieldBody>
                            </Field>
                        }
                        <Field>
                            <FieldBody>
                                <Button Color="Color.Success" Clicked="@AddPlayerClicked">Add/Edit Player</Button>&nbsp;
                                <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                            </FieldBody>
                        </Field>
                    </Field>
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<!--Team Edit Modal-->
<Modal @ref="modalAddTeam">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add/Edit Teams</ModalTitle>
            <CloseButton AutoClose="true" />
        </ModalHeader>
        <ModalBody>
            <Form>
                <Field>
                    <Field ColumnSize="ColumnSize.IsFull">
                        @*<Select TValue="int" SelectedValueChanged="@LoadTeam">
                        <SelectItem Value="0">Select a Team to Edit</SelectItem>
                        @foreach (var t1 in teams)
                        {
                        <SelectItem Value="@t1.Id">@t1.TeamName</SelectItem>
                        }
                        </Select> *@
                        <DropdownList TItem="TeamDetails" TValue="int"
                                      Data="@teams"
                                      TextField="@((item)=>item.TeamName)"
                                      ValueField="@((item)=>item.Id)"
                                      SelectedValueChanged="@LoadTeam">
                            Select Team to Edit
                        </DropdownList>
                    </Field>
                </Field>
                <Field>
                    @if (addTeam is not null)
                    {
                        <Field ColumnSize="ColumnSize.IsFull">
                            <FieldLabel>Team Name:</FieldLabel>
                            <FieldBody><TextEdit @bind-Text="@addTeam.TeamName" /></FieldBody>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsFull">
                            <FieldLabel>Team Captain:</FieldLabel>
                            <FieldBody>
                                <Select TValue="int" SelectedValue="@addTeam.Captain_Player_Id" SelectedValueChanged="@TeamCaptainSelected">
                                    <SelectItem>Select A Captain</SelectItem>
                                    @if (players is not null)
                                    {
                                        @foreach (var p in players)
                                        {
                                            <SelectItem Value="@p.Id">@p.FirstName @p.LastName</SelectItem>
                                        }
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldBody>
                                <Button Color="Color.Success" Clicked="@AddTeamClicked">Add/Edit Team</Button>&nbsp;
                                <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                            </FieldBody>
                        </Field>
                    }
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<!--Schedule Modal-->
<Modal @ref="modalAddSchedule">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add/Edit Schedule</ModalTitle>
            <CloseButton AutoClose="true" />
        </ModalHeader>
        <ModalBody>
            <Form>
                <Field>
                    <Field ColumnSize="ColumnSize.IsFull">
                        <FieldBody>
                            <Select TValue="int" SelectedValueChanged="@LoadSchedule">
                                <SelectItem>Select Schedule to Edit</SelectItem>
                                @if (schedules is not null)
                                {
                                    @foreach (var s in schedules)
                                    {
                                        @if (teams is not null)
                                        {
                                            <SelectItem Value="@s.Id">Week @s.Week_Id, Date: @s.Date, Home Team: @teams.Where(x => x.Id == s.Home_Team).FirstOrDefault().TeamName, Away Team: @teams.Where(x => x.Id == s.Away_Team).FirstOrDefault().TeamName </SelectItem>
                                        }
                                    }
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                    <Field ColumnSize="ColumnSize.IsFull">
                        <FieldLabel>Date</FieldLabel>
                        <FieldBody>
                            @if (schedule is not null)
                            {
                                <DateEdit @bind-Date="@schedule.Date" />
                            }
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Home Team</FieldLabel>
                        <FieldBody>
                            @if (schedule is not null)
                            {
                                <Select TValue="int" SelectedValue="@schedule.Home_Team">

                                    <SelectItem> Select Home Team</SelectItem>
                                    @if (teams is not null)
                                    {
                                        @foreach (var t3 in teams)
                                        {
                                            <SelectItem Value="@t3.Id">@t3.TeamName</SelectItem>
                                        }
                                    }
                                </Select>
                            }
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Away Team</FieldLabel>
                        <FieldBody>
                            @if (schedule is not null)
                            {
                                <Select TValue="int" SelectedValue="@schedule.Away_Team">
                                    <SelectItem> Select Away Team</SelectItem>
                                    @if (teams is not null)
                                    {
                                        @foreach (var t4 in teams)
                                        {
                                            <SelectItem Value="@t4.Id">@t4.TeamName</SelectItem>
                                        }
                                    }
                                </Select>
                            }
                        </FieldBody>
                    </Field>
                    <Field>
                        <Field>
                            <FieldBody>
                                <Button Color="Color.Success" Clicked="@AddScheduleClicked">Add/Edit Schedule</Button>&nbsp;
                                <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                            </FieldBody>
                        </Field>
                    </Field>
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<!--PlayerData Modal-->
<Modal @ref="modalAddPlayerData">
    <ModalContent Centered Scrollable>
        <ModalHeader>
            <ModalTitle>Add/Edit Player Games</ModalTitle>
            <CloseButton AutoClose="true" />
        </ModalHeader>
        <ModalBody>
            <Form>
                <Field>
                    <Field ColumnSize="ColumnSize.IsFull">
                        @if (player is not null)
                        {
                            <Select TValue="int" SelectedValue="@player.Id" SelectedValueChanged="@LoadPlayer">

                                <SelectItem>Choose Player To Add Games To</SelectItem>
                                @if (players is not null)
                                {
                                    @foreach (var p5 in players)
                                    {
                                        <SelectItem Value="@p5.Id">@p5.FirstName @p5.LastName</SelectItem>
                                    }
                                }
                            </Select>
                        }
                    </Field>
                </Field>
                <Field>
                    <Field ColumnSize="ColumnSize.IsFull">
                        <FieldLabel>Player Name:</FieldLabel>
                        @if (player is not null)
                        {
                            <FieldBody>
                                <TextEdit @bind-Text="@player.FirstName" Disabled />
                                <NumericPicker @bind-Value="@player.Id" onchanged="@LoadPlayerData(player.Id)" hidden />
                            </FieldBody>
                        }
                    </Field>
                </Field>
                @if (playerData is not null)
                {
                    <FieldLabel>Week Number:</FieldLabel>
                    <FieldBody>
                        <NumericPicker @bind-Value="@playerData.WeekNumber" onclick="@DoesWeekExist()" />
                    </FieldBody>
                    <FieldLabel>Games Won:</FieldLabel>
                    <FieldBody>
                        <NumericPicker @bind-Value="@playerData.GamesWon" onchange="@GamesPlayedCalc()" />
                    </FieldBody>
                    <FieldLabel>Games Lost:</FieldLabel>
                    <FieldBody>
                        <NumericPicker @bind-Value="@playerData.GamesLost" onchange="@GamesPlayedCalc()" />
                    </FieldBody>
                    <FieldLabel>Games Played:</FieldLabel>
                    <FieldBody>
                        <NumericPicker Value="@total" Disabled />
                    </FieldBody>
                }
                <Field></Field>
                <Field>
                    <FieldBody>
                        <Button Color="Color.Success" Clicked="@AddPlayerDataClicked">Modify Player Games</Button>&nbsp;
                        <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                    </FieldBody>
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<!--Weeks Modal-->
<Modal @ref="modalAddWeeks">
    <ModalContent Centered Scrollable>
        <ModalHeader>
            <ModalTitle>Add/Edit Week Stats</ModalTitle>
            <CloseButton AutoClose="true" />
        </ModalHeader>
        <ModalBody>
            Weeks can currenty ONLY be added and not modified. If data is not correct please contact the site admin to correct it.
            <Divider />
            <Form>
                <Field>
                    @*<Field>
                    <Field ColumnSize="ColumnSize.IsFull">
                    <Select TValue="int" SelectedValue="@week.WeekNumber" SelectedValueChanged="@LoadWeek">
                    <SelectItem Value="0">Choose Week To Edit</SelectItem>
                    @foreach (var s in schedules)
                    {
                    <SelectItem Value="@week.WeekNumber">
                    Week #: @s.Week_Id,
                    Home: @teams.Where(x => x.Id == s.Home_Team).FirstOrDefault().TeamName,
                    Away: @teams.Where(x => x.Id == s.Away_Team).FirstOrDefault().TeamName
                    </SelectItem>
                    }
                    </Select>
                    </Field>
                    </Field> *@
                    <Field>
                        <Field ColumnSize="ColumnSize.IsFull">
                            <FieldLabel>Week #:</FieldLabel>
                            <FieldBody>
                                @if (week is not null)
                                {
                                    <NumericEdit @bind-Value="@week.WeekNumber" onchanged="@LoadWeek" />
                                }
                            </FieldBody>
                            <FieldLabel>Home Team:</FieldLabel>
                            <FieldBody>
                                @if (week is not null)
                                {
                                    <Select TValue="int" SelectedValue="@week.Home_Team" SelectedValueChanged="@UpdateHomeTeam">
                                        <SelectItem Value="0">Select a Home Team</SelectItem>
                                        @if (teams is not null)
                                        {
                                            @foreach (var t1 in teams)
                                            {
                                                <SelectItem Value="t1.Id">@t1.TeamName</SelectItem>
                                            }
                                        }
                                    </Select>
                                }
                            </FieldBody>
                            <FieldLabel>Away Team:</FieldLabel>
                            <FieldBody>
                                @if (week is not null)
                                {
                                    <Select TValue="int" SelectedValue="@week.Away_Team" SelectedValueChanged="@UpdateAwayTeam">
                                        <SelectItem Value="0">Select an Away Team</SelectItem>
                                        @if (teams is not null)
                                        {
                                            @foreach (var t2 in teams)
                                            {
                                                <SelectItem Value="t2.Id">@t2.TeamName</SelectItem>
                                            }
                                        }
                                    </Select>
                                }
                            </FieldBody>
                            <FieldBody>&nbsp;</FieldBody>
                            @if (week is not null)
                            {
                                <FieldBody>
                                    <Check TValue="bool" @bind-Checked="@week.Home_Won">Home Won</Check>
                                </FieldBody>
                                <FieldBody>
                                    &nbsp;<Check TValue="bool" @bind-Checked="@week.Forfeit">Forfeit</Check>
                                </FieldBody>
                                <FieldBody>
                                    &nbsp;<Check TValue="bool" @bind-Checked="@week.Playoff">Playoff</Check>
                                </FieldBody>
                            }
                            <FieldBody><br /></FieldBody>
                            <FieldBody>
                                <Button Color="Color.Success" Clicked="@AddWeekClicked">Add Weeks</Button>&nbsp;
                                <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                            </FieldBody>
                        </Field>
                    </Field>
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<!--Assign Roles-->
<Modal @ref="modalAssignRoles">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Assign Roles</ModalTitle>
            <CloseButton AutoClose="true" />
        </ModalHeader>
        <ModalBody>
            <Form>
                <Field>
                    <Field ColumnSize="ColumnSize.IsFull">
                        <Select TValue="int">
                            <SelectItem>Select a Player to Edit</SelectItem>
                            @if (players is not null)
                            {
                                @foreach (var p1 in players)
                                {
                                    <SelectItem Value="@p1.Id">@p1.FirstName @p1.LastName</SelectItem>
                                }
                            }
                        </Select>

                    </Field>
                </Field>
                <Field>
                    @if (player is not null)
                    {
                        <Field ColumnSize="ColumnSize.IsHalf">
                            <FieldLabel>First Name:</FieldLabel>
                            <FieldBody><TextEdit @bind-Text="@player.FirstName" MaskType="MaskType.RegEx" EditMask="^[a-zA-Z ]*$" /></FieldBody>
                        </Field>
                        <Field>
                            <FieldLabel ColumnSize="ColumnSize.IsHalf">Last Name:</FieldLabel>
                            <FieldBody><TextEdit @bind-Text="@player.LastName" MaskType="MaskType.RegEx" EditMask="^[a-zA-Z ]*$" /></FieldBody>
                        </Field>
                        <Field>
                            <FieldLabel>Team:</FieldLabel>
                            <FieldBody>
                                <Select TValue="int" SelectedValue="@player.TeamId" SelectedValueChanged="@PlayerTeamSelected">
                                    <SelectItem>Select A Team</SelectItem>
                                    @if (teams is not null)
                                    {
                                        @foreach (var t in teams)
                                        {
                                            <SelectItem Value="@t.Id">@t.TeamName</SelectItem>
                                        }
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldBody>
                                <Button Color="Color.Success" Clicked="@AddPlayerClicked">Add/Edit Player</Button>&nbsp;
                                <Button Color="Color.Light" Type="ButtonType.Reset">Clear</Button>
                            </FieldBody>
                        </Field>
                    }
                </Field>
            </Form>
        </ModalBody>
    </ModalContent>
</Modal>
<br />
<!--Toaster-->
<Toaster>
    <Toast @bind-Visible="@toastVisible">
        <ToastHeader>
            <Strong Margin="Margin.IsAuto.FromEnd">@toastTitle</Strong>
            <CloseButton />
        </ToastHeader>
        <ToastBody>
            @toastMessage
        </ToastBody>
    </Toast>
</Toaster>


@code {
    [CascadingParameter]
    LoadingIndicator loadingIndicator { get; set; } = new();

    [Inject] private IToastService? ToastService { get; set; }

    //Modals
    private Modal modalAddPlayer = new();
    private Modal modalAddTeam = new();
    private Modal modalAddSchedule = new();
    private Modal modalAddPlayerData = new();
    private Modal modalAddWeeks = new();
    private Modal modalAssignRoles = new();

    //Properties
    private Player player { get; set; } = new();
    private PlayerData playerData { get; set; } = new();
    private TeamDetails? addTeam { get; set; } = new();
    private Weeks? week { get; set; } = new();
    private Schedules? schedule { get; set; } = new();
    private int selectedTeam { get; set; } = new();

    //Services
    private APIService apiService = new();
    private PlayerHelpers playerHelper = new();
    private WeekHelper weekHelper = new();

    //Lists
    private List<TeamDetails> teams = [];
    private List<Player>? players = [];
    private List<Schedules>? schedules = [];
    private List<PlayerData>? pData = [];
    private List<Weeks>? weeks = [];
    private List<Auth0Users> users = [];

    //Variables
    private int total;
    private bool toastVisible = false;
    private string? toastMessage;
    private string? toastTitle;
    private AuthenticationState? state { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await loadingIndicator.Show();
        ClearLists();

        //Authentication
        if (authenticationState is not null)
        {
            state = await authenticationState;
            if (state.User.Identity is not null)
            {
                Username = state.User.Identity.Name ?? string.Empty;
                UserId = state.User.Claims
                    .Where(c => c.Type.Equals(@"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;

                // Remove Auth0 prefix
                UserId = UserId.Split('|')[1];

                Email = state.User.Claims
                    .Where(c => c.Type.Equals(@"https://wpl.somee.com/email"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;

                Roles = state.User.Claims
                    .Where(c => c.Type.Equals(@"https://wpl.somee.com/roles"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;
            }
            await loadingIndicator.Hide();
        }
    }

    //AntiForgery Tasks


    //Form Tasks
    private async Task AddPlayerClicked()
    {
        if (player.LastName is null)
        {
            player.LastName = string.Empty;
        }
        var response = await apiService.AddPlayer(player);

        if (response)
        {
            toastMessage = $"Player {player.FirstName} {player.LastName} has been added or edited.";
            toastTitle = "Add/Edit Player";
            toastVisible = true;
            ClearLists();
        }
        else
        {
            toastMessage = $"Failed to Add or Edit Player {player.FirstName} {player.LastName}.";
            toastTitle = "Add/Edit Player";
            toastVisible = true;
        }
    }

    async Task AddTeamClicked()
    {
        var t = await apiService.GetTeamDetails();
        if (addTeam is not null)
        {
            var response = await apiService.AddTeam(addTeam);
            if (response)
            {
                toastMessage = $"Team {addTeam.TeamName} has been added or edited.";
                toastTitle = "Add/Edit Team";
                toastVisible = true;
                ClearLists();
            }
            else
            {
                toastMessage = $"Failed to Add Team {addTeam.TeamName}.";
                toastTitle = "Add/Edit Team";
                toastVisible = true;
            }
        }
    }

    async Task AddScheduleClicked()
    {
        if (schedule is not null)
        {
            var response = await apiService.AddSchedule(schedule);
            if (response)
            {
                toastMessage = $"Schedule {schedule.Week_Id} {schedule.Home_Team} {schedule.Away_Team} has been added or edited.";
                toastTitle = "Add/Edit Schedule";
                toastVisible = true;
                ClearLists();
            }
            else
            {
                toastMessage = $"Failed to Add Schedule {schedule.Week_Id} {schedule.Home_Team} {schedule.Away_Team}.";
                toastTitle = "Add/Edit Schedule";
                toastVisible = true;
            }
        }
    }

    async Task AddPlayerDataClicked()
    {
        if (playerData is not null)
        {
            playerData.GamesPlayed = total;
            playerData.PlayerId = player.Id;
            if (playerData.GamesWon != 0)
            {
                playerData.Average = Decimal.Round((decimal)playerData.GamesWon / (decimal)playerData.GamesPlayed * 100, 2);
            }
            var response = await apiService.SavePlayerData(playerData);
            if (response)
            {
                toastMessage = $"{player.FirstName} {player.LastName}'s Games Added/Edited.";
                toastTitle = "Add/Edit Player Games";
                toastVisible = true;
                ClearLists();
            }
            else
            {
                toastMessage = $"Failed to Add/Edit Player {player.FirstName} {player.LastName}'s Games.";
                toastTitle = "Add/Edit Player Games";
                toastVisible = true;
            }
        }
    }

    async Task AddWeekClicked()
    {
        if (week is not null || teams is not null)
        {
            weeks = await apiService.GetAllWeeks();
            if (weeks.Where(x => x.WeekNumber == week.WeekNumber).Where(y => y.Home_Team == week.Home_Team).Where(z => z.Away_Team == week.Away_Team).FirstOrDefault()?.WeekNumber == week.WeekNumber
            && weeks.Where(x => x.WeekNumber == week.WeekNumber).Where(y => y.Home_Team == week.Home_Team).Where(z => z.Away_Team == week.Away_Team).FirstOrDefault()?.Home_Team == week.Home_Team
            && weeks.Where(x => x.WeekNumber == week.WeekNumber).Where(y => y.Home_Team == week.Home_Team).Where(z => z.Away_Team == week.Away_Team).FirstOrDefault()?.Away_Team == week.Away_Team)
            {
                var response = await apiService.UpdateWeeks(week);
                if (response)
                {
                    if (teams is not null)
                    {
                        toastMessage = $"Week: {week.WeekNumber} {teams.Where(w => w.Id == week.Home_Team).FirstOrDefault().TeamName} {teams.Where(w => w.Id == week.Away_Team).FirstOrDefault().TeamName} Added/Edited.";
                        toastTitle = "Add/Edit Player Games";
                        toastVisible = true;
                        ClearLists();
                    }
                }
                else
                {
                    toastMessage = $"Failed to Add/Edit Week for {week.WeekNumber} {teams.Where(w => w.Id == week.Home_Team).FirstOrDefault().TeamName} {teams.Where(w => w.Id == week.Away_Team).FirstOrDefault().TeamName}.";
                    toastTitle = "Add/Edit Week";
                    toastVisible = true;
                }
            }
            else
            {
                var response = await apiService.AddWeeks(week);
                if (response)
                {
                    toastMessage = $"Week: {week.WeekNumber} {teams.Where(w => w.Id == week.Home_Team).FirstOrDefault().TeamName} {teams.Where(w => w.Id == week.Away_Team).FirstOrDefault().TeamName} Added/Edited.";
                    toastTitle = "Add/Edit Player Games";
                    toastVisible = true;
                    ClearLists();
                }
                else
                {
                    toastMessage = $"Failed to Add/Edit Week for {week.WeekNumber} {teams.Where(w => w.Id == week.Home_Team).FirstOrDefault().TeamName} {teams.Where(w => w.Id == week.Away_Team).FirstOrDefault().TeamName}.";
                    toastTitle = "Add/Edit Week";
                    toastVisible = true;
                }
            }
        }
    }

    //Select Field Tasks
    Task PlayerTeamSelected(int value)
    {
        player.TeamId = value;
        return Task.CompletedTask;
    }

    Task ScheduleSelected(DateOnly value)
    {
        if (schedule is not null)
        {
            schedule.Date = value;
        }
        return Task.CompletedTask;
    }

    Task TeamCaptainSelected(int value)
    {
        if (addTeam is not null)
        {
            addTeam.Captain_Player_Id = value;
        }
        return Task.CompletedTask;
    }

    //Load Items
    async Task LoadPlayer(int value)
    {
        player = await apiService.GetSinglePlayer(value);

    }

    async Task LoadTeam(int value)
    {
        addTeam = await apiService.GetSingleTeam(value);
    }

    async Task LoadSchedule(int value)
    {
        schedule = await apiService.GetSingleSchedule(value);
    }

    async Task LoadPlayerData(int value)
    {
        playerData = await apiService.GetSinglePlayerData(value);
    }

    Task LoadWeek(int value)
    {
        if (week is not null)
        {
            week.WeekNumber = value;
        }
        return Task.CompletedTask;
    }

    Task UpdateHomeTeam(int value)
    {
        if (week is not null)
        {
            week.Home_Team = value;
        }
        return Task.CompletedTask;
    }

    Task UpdateAwayTeam(int value)
    {
        if (week is not null)
        {
            week.Away_Team = value;
        }
        return Task.CompletedTask;
    }

    //Modal Tasks
    Task ShowPlayerModal()
    {
        ClearLists();
        return modalAddPlayer.Show();
    }

    Task ShowTeamModal()
    {
        ClearLists();
        return modalAddTeam.Show();
    }

    Task ShowScheduleModal()
    {
        ClearLists();
        return modalAddSchedule.Show();
    }

    Task ShowPlayerDataModal()
    {
        ClearLists();
        return modalAddPlayerData.Show();
    }

    Task ShowWeeksModal()
    {
        ClearLists();
        return modalAddWeeks.Show();
    }

    //Misc Functions

    Task GamesPlayedCalc()
    {
        if (playerData is not null)
        {
            total = playerData.GamesWon + playerData.GamesLost;
        }
        return Task.CompletedTask;
    }

    Task DoesWeekExist()
    {
        if (pData is not null)
        {
            if (pData.Where(x => x.WeekNumber == playerData.WeekNumber && x.PlayerId == player.Id).Count() != 0)
            {
                toastMessage = $"{player.FirstName} {player.LastName} Week Exists.";
                toastTitle = "Week Exists";
                toastVisible = true;
                playerData = pData.Where(x => x.WeekNumber == playerData.WeekNumber && x.PlayerId == player.Id).FirstOrDefault();
            }
            else if (playerData.WeekNumber > 0 && pData.Where(x => x.WeekNumber == playerData.WeekNumber && x.PlayerId == player.Id).Count() != 0)
            {
                toastMessage = $"{player.FirstName} {player.LastName} Week Doesn't Exist, Adding.";
                toastTitle = "Week Doesn't Exist";
                toastVisible = true;
            }
        }
        return Task.CompletedTask;
    }

    //Toast Service
    private void BuildToastInstanceOptions(ToastInstanceOptions toastInstanceOptions)
    {
        toastInstanceOptions.Animated = true;
        toastInstanceOptions.AnimationDuration = 300;
        toastInstanceOptions.Autohide = true;
        toastInstanceOptions.AutohideDelay = 3000;
    }

    private async void ClearLists()
    {
        addTeam = new();
        player = new();
        playerData = new();
        schedule = new();
        week = new();
        
        pData = new();
        players = new();
        schedules = new();
        teams = new();

        teams = await apiService.GetTeamDetails();
        players = await apiService.GetAllPlayers();
        schedules = await apiService.GetSchedule();
        pData = await apiService.GetAllPlayerData();
        weeks = await apiService.GetAllWeeks();

    }

    //Authentication
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string Username = "Anonymous User";
    private string UserId = "";
    private string Email = "";
    private string Roles = "";
}
